Get started with Docker Compose
https://docs.docker.com/compose/gettingstarted/#step-5-edit-the-compose-file-to-add-a-bind-mount

This project is a simple python web application running on docker compose.
The application uses flask framework and maintains a hit counter in Redis.

Prerequisites

Make sure you have already installed both Docker Engine and Docker Compose. you don't need to install python or Redis, as both are provided by Docker images

Dockerfile: it builds the docker image. The image contains all the dependencies the python application requires, including python itself. Create a file named Dockerfile in project directory.


next step
Define services in a compose file
create a file called docker-compose.yml

last step: Build and run your app with Compose
docker-compose up
    - Compose pulls a Redis image, builds an image for your code, and starts the services you defined. In this case, the code is statically copied into the image at build time.
    - Enter http://0.0.0.0:5000/ in a browser to see the application running.

----------
- In another terminal type "docker image ls" to list local images.
- You can inspect images with docker inspect <tag or id>.
----------

Stop the application, either by running docker-compose down from within your project directory in the second terminal, or by hitting CTRL+C in the original terminal where you started the app.

Edit the Compose file to add a bind mount
Edit docker-compose.yml in your project directory to add a bind mount for the web service: The new volumes key mounts the project directory (current directory) on the host to /code inside the container, allowing you to modify the code on the fly, without having to rebuild the image.


Running in the background
If you want to run your services in the background, you can pass the -d flag (for “detached” mode) to docker-compose up and use docker-compose ps to see what is currently running

If you started Compose with docker-compose up -d, stop your services once you’ve finished with them:

$ docker-compose stop

You can bring everything down, removing the containers entirely, with the down command. Pass --volumes to also remove the data volume used by the Redis container:

$ docker-compose down --volumes
